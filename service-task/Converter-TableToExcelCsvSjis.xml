<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Converter (Table to Excel-CSV FILE) sjis</label>
<label locale="ja">コンバータ (Table to Excel-CSV FILE) sjis</label>

<last-modified>2018-11-14</last-modified>
<help-page-url>https://support.questetra.com/addons/converter-tabletoexcelcsvsjis/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/converter-tabletoexcelcsvsjis/</help-page-url>

<configs>
  <config name="conf_DataIdA" required="true" form-type="SELECT" select-data-type="LIST">
    <label>A: Select TABLE DATA</label>
    <label locale="ja">A: テーブル型データを選択してください</label>
  </config>
  <config name="conf_ColIds" required="true" form-type="TEXTFIELD">
    <label>B: Set COL IDs for Extraction (e.g. "0,1,5,3,6")</label>
    <label locale="ja">B: 抽出データのカラム ID をセットしてください (例 "0,1,5,3,6")</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C: Select STRING DATA for File Name</label>
    <label locale="ja">C: ファイル名が格納されている文字列型データを選択してください</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="SELECT" select-data-type="FILE">
    <label>D: Select FILE DATA (append)</label>
    <label locale="ja">D: ファイル型データを選択してください（追加）</label>
  </config>
</configs>

<engine-type>1</engine-type>

<script><![CDATA[
// Converter from Table to Excel-CSV (ver. 20180829)
// (c) 2018, Questetra, Inc. (the MIT License)

//// == Config Retrieving / 工程コンフィグの参照 ==
const dataIdA = configs.get( "conf_DataIdA" ) + "";
const colIds  = configs.get( "conf_ColIds" )  + "";
const dataIdC = configs.get( "conf_DataIdC" ) + "";
const dataIdD = configs.get( "conf_DataIdD" ) + "";

//// == Data Retrieving / ワークフローデータの参照 ==
const myTable = engine.findDataByNumber( dataIdA );
// com.questetra.bpms.core.model.formdata.ListArray
const fileName = engine.findDataByNumber( dataIdC ) + "";
let   myFiles  = engine.findDataByNumber( dataIdD );// java.util.ArrayList
if( myFiles === null ){ myFiles = new java.util.ArrayList(); }

if( myTable === null){
  throw new Error( "Source Table data is NULL" );
}

//// == Calculating / 演算 ==
let colIdArray = colIds.split(",");
let numOfCols = colIdArray.length;
let numOfRows = myTable.size() - 0; // 行（Tableの高さ）

let myTsv = "";
for( let i = 0; i < numOfRows; i++ ){
  for( let j = 0; j < numOfCols; j++ ){
    myTsv += myTable.get(i, parseInt( colIdArray[j] ) ) + "";
    if( j != numOfCols - 1 ){
      myTsv += "\t";
    }
  }
  if( i != numOfRows - 1 ){
    myTsv += "\n";
  }
}

// for sjis-csv
let myCsv = myTsv.replace( /,/g, "" ).replace( /\t/g, "," );


myFiles.add(
  new com.questetra.bpms.core.event.scripttask.NewQfile(
    fileName,
//    "text/tab-separated-values; charset=x-UTF-16LE-BOM",
    "text/comma-separated-values; charset=Shift_JIS", // for sjis
//    myTsv
    myCsv
  )
);

//// == Data Updating / ワークフローデータへの代入 ==
engine.setDataByNumber( dataIdD, myFiles );
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACx0lEQVRYR8WXz0sUYRjHP5O0CLX+
uHTIQ7sHIby0BdIh0EU6hwmd20Vx9mb9AUvlQQSRVhBq0WW3gxcFKzx4000kBKO2QNgSssgS6uDu
oQQJJt4ZZ3ecH+s4O+kLyy7s+z7fz/PM87zPMxKnvKRj6afpBbpRiCDRAkQOzhdQKCEhvvMkeOnW
7tEAWVrYZwi4B6qom1UCUgSYII747bhqAzwhxhkeH0PYLCTE48i8cCJwBnhKCkn13I+VQua+nSF7
gDQ54K4fyhUbCjkSxM02rQD+en5YT2GChJpLlXUYQHvmWV89txq7bcyJKoCW7Vt1JJxb7hIBwnp1
VAHSPAQeuLVSa99U1xTzW/Msflt02vYIWdXDCCBKptkPgI07GzQFmhhcGXSCKCHTWgXQbrjnRvGe
iz20nWvzxJO8lqS9uZ3t39u1INRc0CJgk/nCi47WDk8AxkOOEAcVoQGkyat3vGH5BbD3d4/RwijD
b4fNzrxCJqoDfAEuGXdMd03TeaHTUwRC50NqDgjx8Q/jJN8k7ewUkLmqAyielBwOieiFg+Fa4tpJ
GelIgODZIJnuDDt/dhh67a41rN5aZfnHspPnVWwDgOURiF1CPBvN0hvqJfcxx8DKgH+BUnhPgohj
EhrFG6QG1n6usVne9ASw9H2J3CfR3w4tQxLalOHszVn6wn0I8XpXppixRs9UhpaLaPLGJP2X+2ls
aKxXH1sAMFxE2l1guYqNEHOf51j4uuAJplgqsv5r3Xi2jKyNd0c2Ix1iZnPGzyS0aUZaOxbVYGlI
Y9fH2N3fZeTdiKcImA6VCRCytmOx61QHEh3zf45kUAm9LndyQyk8QyZmfoYnNZZbPK8dAf1fbVAR
V5jXSakMxLy9mOgQWnWIUVp83IIIYfFqlqrv1cz8wEREFKJIRFBoQeKKukU0FokSCgUk8rU8dp8D
flS8Cxv/AFp57iGwqv7bAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
