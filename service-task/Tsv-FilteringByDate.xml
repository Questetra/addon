<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>TSV Filtering by Date</label>
<label locale="ja">日付によるTSVフィルタ</label>

<last-modified>2018-08-18</last-modified>
<help-page-url>https://support.questetra.com/addons/tsv-filteringbydate/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/tsv-filteringbydate/</help-page-url>

<summary>Filter a row in a tab-delimited text (TSV) stored in a String type Data Items by date range and save.
dateString should be in a format recognized by the Date.parse() method.
Date-only strings (e.g. "1970-01-01") are treated as UTC, not local.</summary>
<summary locale="ja">文字型データ項目に格納されたタブ区切りテキスト（TSV）の行を、日付の範囲でフィルターして保存します
日付を表す文字列値は Date.parse() メソッドによる認識可能な形式でなければなりません。
日付のみの文字列 (例: "1970-01-01") は、地方時ではなくUTCとして扱われます。</summary>

<configs>
  <config name="conf_DataIdA" required="true" form-type="SELECT" select-data-type="STRING">
    <label>A: Select TSV STRING DATA</label>
    <label locale="ja">A: TSVデータが格納されている文字列型データ項目を選択してください</label>
  </config>
  <config name="conf_FilterColumn" required="true" el-enabled="true" form-type="TEXTFIELD">
    <label>B: Set Column ID for Filter (e.g. "0")</label>
    <label locale="ja">B: フィルタが適用される日付列のIDをセットしてください (例 "0")</label>
  </config>
  <config name="conf_FilterMin" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C: Set Start Value of Date Filter (e.g. "2018-01-23")</label>
    <label locale="ja">C: 日付フィルタの範囲開始日をセットしてください (例 "2018-01-23")</label>
  </config>
  <config name="conf_FilterMax" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>D: Set End Value of Date Filter (e.g. "2018-12-31")</label>
    <label locale="ja">D: 日付フィルタの範囲終了日をセットしてください (例 "2018-12-31")</label>
  </config>
  <config name="conf_DataIdE" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>E: Select STRING DATA for Generated TSV (update)</label>
    <label locale="ja">E: 生成TSVが格納される文字列型データ項目を選択してください（更新）</label>
  </config>
</configs>

<engine-type>1</engine-type>

<script><![CDATA[
// (c) 2018, Questetra, Inc. (the MIT License)


//////// START "main()" ////////
main();
function main(){ 


//// == Config Retrieving / 工程コンフィグの参照 ==
const dataIdA = configs.get( "conf_DataIdA" ) + "";
const dataIdE = configs.get( "conf_DataIdE" ) + "";
// 'java.lang.String' (String Obj) to javascript primitive 'string'
// https://wiki.openjdk.java.net/display/Nashorn/Rhino+Migration+Guide#RhinoMigrationGuide-JavaScriptvsJavaStrings
// https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/api.html#sthref21

const filterColumn = configs.get( "conf_FilterColumn" ) - 0;
let   filterMin    = configs.get( "conf_FilterMin" )    + "";
let   filterMax    = configs.get( "conf_FilterMax" )    + "";
if( filterMin === "" && filterMax === "" ){
  throw new Error( "Illegal Filter Modeling: NULL to NULL" );
}
let   dateFilterMin = new Date(filterMin);
let   dateFilterMax = new Date(filterMax);
// Note: parsing of date strings with the Date constructor is strongly discouraged due to engine differences and inconsistencies.


//// == Data Retrieving / ワークフローデータの参照 ==
let   myTsv  = engine.findDataByNumber( dataIdA );
if( myTsv  !== null ){ myTsv += ""; }else{
  throw new Error( "Source TSV data is NULL" );
}


//// == Calculating / 演算 ==
let   newTsv   = "";
const arrMyTsv = myTsv.split("\n"); // string[]
engine.log( "Filter: " + filterMin + " - " + filterMax );

if( filterMin !== "" && filterMax !== "" ){
  for( let i = 0; i < arrMyTsv.length; i++ ){
    let arrMyCellValues = arrMyTsv[i].split("\t");
    let dateCell = new Date(arrMyCellValues[filterColumn]);
    if( dateCell.getTime() >= dateFilterMin.getTime()
     && dateCell.getTime() <= dateFilterMax.getTime() ){
      newTsv += arrMyTsv[i];
      if( i !== arrMyTsv.length - 1 ){
        newTsv += "\n";
      }
    }
  }
}else if( filterMin === "" && filterMax !== "" ){
  for( let i = 0; i < arrMyTsv.length; i++ ){
    let arrMyCellValues = arrMyTsv[i].split("\t");
    let dateCell = new Date(arrMyCellValues[filterColumn]);
    if( dateCell.getTime() <= dateFilterMax.getTime() ){
      newTsv += arrMyTsv[i];
      if( i !== arrMyTsv.length - 1 ){
        newTsv += "\n";
      }
    }
  }
}else if( filterMin !== "" && filterMax === "" ){
  for( let i = 0; i < arrMyTsv.length; i++ ){
    let arrMyCellValues = arrMyTsv[i].split("\t");
    let dateCell = new Date(arrMyCellValues[filterColumn]);
    if( dateCell.getTime() >= dateFilterMin.getTime() ){
      newTsv += arrMyTsv[i];
      if( i !== arrMyTsv.length - 1 ){
        newTsv += "\n";
      }
    }
  }
}


//// == Data Updating / ワークフローデータへの代入 ==
engine.setDataByNumber( dataIdE, newTsv );


} //////// END "main()" ////////

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAB7klEQVRYR8WXwVHCQBSG94cbHMQK1ArUCgw3ZsMMYwVCBdKBUoFSgdgBB/KGm7ED7IASckmOec4yWWeNidmwAbjyZr+Pf9+8t0A09JFS3gghRkQ0q3Mk6hSX1So4gA8hRI+ZZ0T0bHuus4AJ11BmnhDRwkbCSaAIrqFpmt632+0oTdO7JEnmYRhGRUKuAlsAFyW/VAF76jtm3iRJ0i+ScBVQjRcCOKuKu0zCSUBBs+63liCiW1PWWSCTGAN4q0ohu45bItro2kYE1GG+76uuf6iQeA+CYHySBJh5S0RXecFGErDtAwD91WoVNprAYDC4XK/XWxuJohScEtCDiJmXRDSxlPg1JfcWyE9BZl7kJJbM7OUHVT6FvQTKRrCWqLoWc1fUFvhv/gshvuI49syRK6X8MyPMFGoJ1IXrbpdSvgJ4NLufmXcDyVpgX7iG+r6vpt+1sbLnRDS1EnCFK6jqi1artTEWVxQEwXmlQBNwI4WpEOLlZw8A/X8FmoQb/bAEMMoW06xU4BDw/FUw82ehwKHgRgrPAJ4KBQ4N1xLD4dBTi+lXAseCF27DU8CVyC6BU8F3AqeEa4Go5Fn9Z7HYPDrr1iA/o7MDjgLfJeB5Xq/b7ap3ml4UR4P/NKGS6HQ6CwBRHMfTsv9xdeO1qf8G4yxv7ljnMNoAAAAASUVORK5CYII=
</icon>

</service-task-definition>